DATABASES = {
    'default': {
         'ENGINE': 'django.db.backends.postgresql_psycopg2',
         'NAME': 'geonode',
         'USER': 'geonode',
         'PASSWORD': 'geonode',
     },
    # vector datastore for uploads
    'datastore' : {
        #'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'ENGINE': '', # Empty ENGINE name disables 
        'NAME': 'geonode',
        'USER' : 'geonode',
        'PASSWORD' : 'geonode',
        'HOST' : 'localhost',
        'PORT' : '5432',
    }
}

# OGC (WMS/WFS/WCS) Server Settings
OGC_SERVER = {
    'default' : {
        'BACKEND' : 'geonode.geoserver',
        'LOCATION' : 'http://localhost:8080/geoserver/',
        'PUBLIC_LOCATION' : 'http://localhost:8080/geoserver/',
        'USER' : 'admin',
        'PASSWORD' : 'geoserver',
        'MAPFISH_PRINT_ENABLED' : True,
        'PRINT_NG_ENABLED' : True,
        'GEONODE_SECURITY_ENABLED' : True,
        'GEOGIT_ENABLED' : False,
        'WMST_ENABLED' : False,
        'BACKEND_WRITE_ENABLED': True,
        'WPS_ENABLED' : False,
        # Set to name of database in DATABASES dictionary to enable
        'DATASTORE': '', #'datastore',
    }
}

# Reconcile with ``settings.py``
MAP_BASELAYERS[0]["source"]["url"] = (OGC_SERVER['default']['PUBLIC_LOCATION'] +
                                      "wms" if OGC_SERVER and any(OGC_SERVER) else
                                      'http://localhost:8080/geoserver/wms')

# Default preview library
#LAYER_PREVIEW_LIBRARY = 'geoext'


import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType


# Baseline configuration.
AUTH_LDAP_SERVER_URI = "ldap://testad.localhost:389"

AUTH_LDAP_BIND_DN = "CN=test1,OU=Users,OU=EDIP,DC=testad,DC=localhost"
AUTH_LDAP_BIND_PASSWORD = "password"

AUTH_LDAP_USER_SEARCH = LDAPSearch("OU=Users,OU=EDIP,DC=testad,DC=localhost",
    ldap.SCOPE_SUBTREE, "(sAMAccountName=%(user)s)")
# or perhaps:
# AUTH_LDAP_USER_DN_TEMPLATE = "uid=%(user)s,ou=users,dc=example,dc=com"

# Set up the basic group parameters.
AUTH_LDAP_GROUP_SEARCH = LDAPSearch("OU=Security Group,OU=EDIP,DC=testad,DC=localhost",
    ldap.SCOPE_SUBTREE, "(objectClass=group)"
)
AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr="CN")

# Simple group restrictions
#AUTH_LDAP_REQUIRE_GROUP = "CN=Domain Users,CN=Users,DC=testad,DC=localhost"
AUTH_LDAP_REQUIRE_GROUP = None
#AUTH_LDAP_DENY_GROUP = "CN=Not,DC=testad,DC=localhost"
AUTH_LDAP_DENY_GROUP = None

# Populate the Django user from the LDAP directory.
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}

AUTH_LDAP_PROFILE_ATTR_MAP = {
    "first_name": "givenName"
}

#If this resolved to true it would add a flag to the profile.
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    #"is_active": "CN=Users,DC=testad,DC=localhost",
}

AUTH_LDAP_PROFILE_FLAGS_BY_GROUP = {
   #"is_awesome": "cn=awesome,ou=django,ou=groups,dc=example,dc=com",
}

# This is the default, but I like to be explicit.
AUTH_LDAP_ALWAYS_UPDATE_USER = True

# Use LDAP group membership to calculate group permissions.
AUTH_LDAP_FIND_GROUP_PERMS = True

# Cache group memberships for an hour to minimize LDAP traffic
AUTH_LDAP_CACHE_GROUPS = True
AUTH_LDAP_GROUP_CACHE_TIMEOUT = 3600

AUTH_LDAP_MIRROR_GROUPS = True


# Keep ModelBackend around for per-user permissions and maybe a local
# superuser.
AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
    #'django.contrib.auth.backends.RemoteUserBackend',
)

AUTH_PROFILE_MODULE = False

